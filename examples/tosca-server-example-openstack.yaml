tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - toscatranslator/providers/common/TOSCA_provider_definition_1_0.yaml
  - toscatranslator/providers/openstack/TOSCA_openstack_definition_1_0.yaml

topology_template:

  node_templates:
    server_kube_master_server:
      type:  openstack.nodes.Server
      properties:
        name:  server_kube_master_0
        meta:
          - cube_master=true
      requirements:
#        - nics:  server_kube_master_port
        - nics:
            node_filter:
              properties:
                name:  test-two-routers
        - flavor:
            node_filter:
              properties:
                vcpus:  1
        - security_groups:  server_kube_master_securitygroup
        - image:
            node_filter:
              properties:
                name: { get_operation_output: [server_kube_master_server_image, Target, choose, name] }
            relationship: server_kube_master_server_image

#    server_kube_master_port:
#      type:  openstack.nodes.Port
#      properties:
#        fixed_ips:
#          - { get_operation_output: [ SELF, Standard, confgure, network_ip_struct ] }
#        name:  server_kube_master_port_0
#      interfaces:
#        Standard:
#          configure:
#            implementation: server_kube_master_port_configure.yaml
#            inputs:
#              network_name: { get_operation_output: [ server_kube_master_port_network, Target, choose, name ] }
#              ip: 192.168.12.25
#      requirements:
#        - dependencies:
#            relationship: server_kube_master_port_network


    server_kube_master_floatingip:
      type:  openstack.nodes.FloatingIp
      attributes:
        floating_ip_address:  10.100.115.15
      requirements:
        - network:
            node_filter:
              properties:
                name:  { get_operation_output: [server_kube_master_floatingip_network, Target, choose, name] }
            relationship: server_kube_master_floatingip_network
        - server:  server_kube_master_server


    server_kube_master_securitygrouprule:
      type:  openstack.nodes.SecurityGroupRule
      attributes:
        protocol:  tcp
        port_range_min:  1000
        port_range_max:  1000
        remote_ip_prefix:  0.0.0.0
      requirements:
        - security_group:  server_kube_master_securitygroup

    server_kube_master_securitygroup:
      type:  openstack.nodes.SecurityGroup
      properties:
        name:  server_kube_master_securitygroup

  relationship_templates:

    server_kube_master_server_image:
      type: openstack.relationships.DependsOn
      interfaces:
        Target:
          total: server_kube_master_server_image_total.yaml
          choose:
            implementation: contains.yaml
            inputs:
              facts: { get_operation_output: SELF, Target, total, target_objects }
              args: ["ubuntu", "xenial", "16.04"]

    server_kube_master_floatingip_network:
      type: openstack.relationships.DependsOn
      interfaces:
        Target:
          total: server_kube_master_floatingip_network_total.yaml
          choose:
            implementation: equals.yaml
            inputs:
              facts: {get_operation_output: [SELF, Target, total, target_objects]}
              name: {get_operation_output: [server_kube_master_floating_ip_subnet, Target, choose, name]}

    server_kube_master_floating_ip_subnet:
      type: openstack.relationships.DependsOn
      interfaces:
        Target:
          total: server_kube_master_floating_ip_subnet_total.yaml
          choose:
            implementation: ip_contains.yaml
            inputs:
              facts: {get_operation_output: [SELF, Target, total, target_objects]}
              ip: 10.100.115.15

    server_kube_master_port_network:
      type: openstack.relationships.DependsOn
      interfaces:
        Target:
          total: server_kube_master_port_network_total.yaml
          choose:
            implementation: equals.yaml
            inputs:
              facts: {get_operation_output: [SELF, Target, total, target_objects]}
              name: {get_operation_output: [server_kube_master_port_subnet, Target, choose, name]}


    server_kube_master_port_subnet:
      type: openstack.relationships.DependsOn
      interfaces:
        Target:
          total: server_kube_master_port_subnet_total.yaml
          choose:
            implementation: ip_contains.yaml
            inputs:
              facts: {get_operation_output: [SELF, Target, total, target_objects]}
              ip: 192.168.12.25
