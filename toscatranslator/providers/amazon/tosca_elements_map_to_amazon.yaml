tosca.nodes.Compute:
  - parameter: amazon.nodes.Key.properties.key_material
    value: "\\{\\{ lookup('file', '{self[public_key_path]}') \\}\\}"
  - parameter: amazon.nodes.Key.properties.name
    value: '{self[keyname]}_key'
  - parameter: amazon.nodes.Instance.requirements
    value:
      parameter: key_name
      value:
        node: "{self[keyname]}_key"
  - parameter: amazon.nodes.Instance.properties.name
    value: "{self[name]}"
  - parameter: "{self[extra][ansible][{self[keyname]}_server][with_sequence]}"
    value: "start=1 end=1"
  - properties:
      meta:
        parameter: amazon.nodes.Instance.properties.tags
        value:
          metadata: "{self[value]}"
      private_address:
        parameter: amazon.nodes.Instance.properties.network
        value:
            assign_public_ip: true
            private_ip_address: "{self[value]}"
      public_address:
        error: true
        reason: Unable to specify {self[parameter]} in AWS
      networks:
        error: true
        reason: Not implemented yet
      ports:
        error: true
        reason: Not implemented yet
    capabilities:
      host.properties.num_cpus:
        parameter: amazon.nodes.Instance.requirements.instance_type.node_filter.properties
        value:
          - parameter: vcpus
            value: "{self[value]}"
      host.properties.cpu_frequency:
        error: true
        reason: Amazon doesn't support parameter {self[parameter]}
      host.properties.disk_size:
        parameter: amazon.nodes.Instance.requirements.instance_type.node_filter.properties
        value:
          - parameter: storage
            value:
              source: transform_units
              executor: python
              parameters:
                source_value: "{self[value]}"
                target_unit: GiB
                is_only_numb: true
              value: default_tmp
      host.properties.mem_size:
        parameter: amazon.nodes.Instance.requirements.instance_type.node_filter.properties
        value:
          - parameter: memory
            value:
              source: transform_units
              executor: python
              parameters:
                source_value: "{self[value]}"
                target_unit: GiB
                is_only_numb: true
              value: default_tmp
      endpoint.properties.ip_address:
        - parameter: "{self[buffer][security_group_rule][cidr_ip]}"
          value: "{self[value]}"
        - parameter: amazon.nodes.Group.properties.name
          value: "{self[name]}_group"
        - parameter: amazon.nodes.Instance.requirements.security_groups
          value: "{self[name]}_group"
      endpoint.properties.protocol:
        parameter: "{self[buffer][security_group_rule][proto]}"
        value: "{self[value]}"
      endpoint.properties.port:
        parameter: "{self[buffer][security_group_rule][ports]}"
        value:
          - "{self[value]}"
      endpoint.properties.secure:
        error: true
        reason: Not supported in AWS
      endpoint.properties.url_path:
        error: true
        reason: Not supported in AWS
      endpoint.properties.port_name:
        error: true
        reason: Not supported in AWS
      endpoint.properties.network_name:
        facts: ec2_vpc_net_info
        executor: ansible
        condition: equals
      endpoint.properties.initiator.target:
        parameter: amazon.nodes.Group.properties.rules
        value:
          - "{self[buffer][security_group_rule]}"
      endpoint.properties.initiator.source:
        parameter: amazon.nodes.Group.properties.rules_egress
        value:
          - "{self[buffer][security_group_rule]}"
      endpoint.properties.initiator.peer:
        - parameter: amazon.nodes.Group.properties.rules
          value:
            - "{self[buffer][security_group_rule]}"
        - parameter: amazon.nodes.Group.properties.rules_egress
          value:
            - "{self[buffer][security_group_rule]}"
      endpoint.properties.ports:
        error: true
        reason: Not implemented yet
      os:
        - properties:
            architecture: "{self[buffer][os][architecture]}"
            type:
              - parameter: "{self[buffer][os][type]}"
                value: '{self[value]}'
              - parameter: '{self[buffer][add_host][ansible_user]}'
                value: '{self[value]}'
            distribution:
              - parameter: "{self[buffer][os][distribution]}"
                value: '{self[value]}'
              - parameter: '{self[buffer][add_host][ansible_user]}'
                value: '{self[value]}'
            version: "{self[buffer][os][version]}"
        - parameter: amazon.nodes.Instance.requirements.image_id.node_filter.properties
          value:
            - parameter: image_id
              value:
                value: image_id
                facts: ec2_ami_info.images
                executor: ansible
                condition: contains
                arguments:
                  - - name
                    - description
                    - architecture
                  - "{self[buffer][os]}"
      scalable.properties:
        min_instances:
          - parameter: "{self[extra][ansible][{self[keyname]}_instance][with_sequence]}"
            value: "start=1 end={self[value]} format={self[name]}-%d"
          - parameter: amazon.nodes.Instance.properties.name
            value: "\\{\\{ item \\}\\}"
        default_instances:
          - parameter: "{self[extra][ansible][{self[keyname]}_instance][with_sequence]}"
            value: "start=1 end={self[value]} format={self[name]}-%d"
          - parameter: amazon.nodes.Instance.properties.name
            value: "\\{\\{ item \\}\\}"
        max_instances:
          - parameter: "{self[extra][ansible][{self[keyname]}_instance][with_sequence]}"
            value: "start=1 end={self[value]} format={self[name]}-%d"
          - parameter: amazon.nodes.Instance.properties.name
            value: "\\{\\{ item \\}\\}"
    requirements.local_storage:
      error: true
      reason: Bad description in TOSCA Profile YAML v1.0

tosca.nodes.SoftwareComponent:
  - requirements:
    - host.node:
        parameter: tosca.nodes.SoftwareComponent.requirements.host.node
        value: "{self[value]}_server"
    - host.relationship:
        parameter: tosca.nodes.SoftwareComponent.requirements.host.relationship
        value: "{self[value]}_hosted_on"
  - properties: tosca.nodes.SoftwareComponent.properties
  - interfaces: tosca.nodes.SoftwareComponent.interfaces

tosca.relationships.DependsOn:
  - requirements: amazon.relationships.DependsOn.requirements
  - attributes: amazon.relationships.DependsOn.attributes
  - properties: amazon.relationships.DependsOn.properties
  - capabilities: amazon.relationships.DependsOn.capabilities
  - interfaces: amazon.relationships.DependsOn.interfaces

tosca.relationships.HostedOn:
  - requirements: amazon.relationships.HostedOn.requirements
  - attributes: amazon.relationships.HostedOn.attributes
  - properties: amazon.relationships.HostedOn.properties
  - capabilities: amazon.relationships.HostedOn.capabilities
  - interfaces: amazon.relationships.HostedOn.interfaces

tosca.relationships.ConnectsTo:
  - requirements: amazon.relationships.ConnectsTo.requirements
  - attributes: amazon.relationships.ConnectsTo.attributes
  - properties: amazon.relationships.ConnectsTo.properties
  - capabilities: amazon.relationships.ConnectsTo.capabilities
  - interfaces: amazon.relationships.ConnectsTo.interfaces

tosca.relationships.AttachesTo:
  - requirements: amazon.relationships.AttachesTo.requirements
  - attributes: amazon.relationships.AttachesTo.attributes
  - properties: amazon.relationships.AttachesTo.properties
  - capabilities: amazon.relationships.AttachesTo.capabilities
  - interfaces: amazon.relationships.AttachesTo.interfaces

tosca.relationships.RoutesTo:
  - requirements: amazon.relationships.RoutesTo.requirements
  - attributes: amazon.relationships.RoutesTo.attributes
  - properties: amazon.relationships.RoutesTo.properties
  - capabilities: amazon.relationships.RoutesTo.capabilities
  - interfaces: amazon.relationships.RoutesTo.interfaces

tosca.relationships.network.LinksTo:
  - requirements: amazon.relationships.network.LinksTo.requirements
  - attributes: amazon.relationships.network.LinksTo.attributes
  - properties: amazon.relationships.network.LinksTo.properties
  - capabilities: amazon.relationships.network.LinksTo.capabilities
  - interfaces: amazon.relationships.network.LinksTo.interfaces

tosca.relationships.network.BindsTo:
  - requirements: amazon.relationships.network.BindsTo.requirements
  - attributes: amazon.relationships.network.BindsTo.attributes
  - properties: amazon.relationships.network.BindsTo.properties
  - capabilities: amazon.relationships.network.BindsTo.capabilities
  - interfaces: amazon.relationships.network.BindsTo.interfaces