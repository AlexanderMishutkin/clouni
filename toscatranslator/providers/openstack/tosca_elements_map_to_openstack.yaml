---
tosca.nodes.Compute:
  - parameter: openstack.nodes.Server.properties.name
    value: "{self[name]}"
  - attributes:
      meta:
        parameter: openstack.nodes.Server.properties.meta
        value:
          - "{self[value]}"
      private_address:
        - parameter: openstack.nodes.Port.properties.fixed_ips
          value:
            - parameter:
                value: name
                condition: equals
                facts: openstack_network_facts
                arguments:
                  - id
                  - value: network_id
                    condition: ip_contains
                    facts: openstack_subnet_facts
                    arguments:
                      - allocation_pool_start
                      - allocation_pool_end
                      - "{self[value]}"
              value: "{self[value]}"
        - parameter: openstack.nodes.Port.properties.name
          value: "{self[name]}_port_0"
        - parameter: openstack.nodes.Server.requirements.nics
          value: "{self[name]}_port"
      public_address:
        parameter: openstack.nodes.FloatingIp
        value:
          - attributes.floating_ip_address
          - parameter: requirements
            value:
              - parameter: network.node_filter.properties.name
                value:
                  value: name
                  facts: openstack_network_facts
                  condition: equals
                  arguments:
                    - id
                    - value: network_id
                      condition: ip_contains
                      facts: openstack_subnet_facts
                      arguments:
                        - allocation_pool_start
                        - allocation_pool_end
                        - "{self[value]}"
              - parameter: server
                value: "{self[name]}_server"
      networks.*.network_name: openstack.nodes.Server.requirements.nics.node_filter.properties.name
      networks.*.network_id: openstack.nodes.Server.requirements.nics.node_filter.properties.id
      networks.*.addresses:
        parameter: openstack.nodes.Server.requirements.nics.node_filter.properties.id
        value:
          value: network_id
          facts: openstack_subnet_facts
          condition: ip_contains
          arguments:
            - allocation_pool_start
            - allocation_pool_end
            - "{self[value]}"
      ports.*.port_name: openstack.nodes.Server.requirements.nics.node_filter.properties.name
      ports.*.port_id: openstack.nodes.Server.requirements.nics.node_filter.properties.id
      ports.*.network_id: openstack.nodes.Server.requirements.nics.node_filter.properties.id
      ports.*.mac_address: openstack.nodes.Server.requirements.nics.node_filter.properties.mac_address
      ports.*.addresses:
        parameter: openstack.nodes.Server.requirements.nics.node_filter.properties.id
        value:
          value: network_id
          facts: openstack_subnet_facts
          condition: ip_contains
          arguments:
            - allocation_pool_start
            - allocation_pool_end
            - "{self[value]}"
    capabilities:
      host.properties.num_cpus: openstack.nodes.Server.requirements.flavor.node_filter.properties.vcpus
      host.properties.cpu_frequency:
        error: true
        reason: Openstack doesn't support parameter {self[parameter]}
      host.properties.disk_size: openstack.nodes.Server.requirements.flavor.node_filter.properties.disk
      host.properties.mem_size: openstack.nodes.Server.requirements.flavor.node_filter.properties.ram
      endpoint.attributes.ip_address:
        - openstack.nodes.SecurityGroupRule.attributes.remote_ip_prefix
        - parameter: openstack.nodes.SecurityGroup.properties.name
          value: "{self[name]}_security_group"
        - parameter: openstack.nodes.Server.requirements.security_groups
          value: "{self[name]}_security_group"
        - parameter: openstack.nodes.SecurityGroupRule.requirements.security_group
          value: "{self[name]}_security_group"
      endpoint.properties.protocol: openstack.nodes.SecurityGroupRule.attributes.protocol
      endpoint.properties.port:
        - openstack.nodes.SecurityGroupRule.attributes.port_range_min
        - openstack.nodes.SecurityGroupRule.attributes.port_range_max
      endpoint.properties.secure: {}
      endpoint.properties.url_path: {}
      endpoint.properties.port_name: {}
      endpoint.properties.network_name: {}
      endpoint.properties.initiator.target:
        parameter: openstack.nodes.SecurityGroupRule.attributes.direction
        value: ingress
      endpoint.properties.initiator.source:
        parameter: openstack.nodes.SecurityGroupRule.attributes.direction
        value: egress
      endpoint.properties.initiator.peer:
        parameter: openstack.nodes.SecurityGroupRule.attributes.direction
        value: peer
      endpoint.properties.ports:
        error: true
        reason: Not implemented yet
      os.properties:
        - parameter: openstack.nodes.Server.requirements.image #  VARIABLE
          value:
            node_filter:
              properties:
                name:
                  get_operation_output:
                    - "{self[name]}_depends_on"
                    - Target
                    - choose
                    - name # VARIABLE
            relationship: "{self[name]}_depends_on"
        - parameter: openstack.relationships.DependsOn.interfaces.Target.total
          value:
            - source: os_server_facts # VARIABLE
              value: default_value?
              executor: ansible
              extra:
                register: facts_result
            - source: set_fact
              parameters:
                target_objects: facts_result["ansible_facts"]["openstack_servers"]
              value: default_value?
        - parameter: openstack.relationships.DependsOn.interfaces.Target.choose
          value:
            implementation: contains.yaml # VARIABLE, ALREADY DEFINED
            inputs:
              facts:
                get_operation_output:
                  - SELF
                  - Target
                  - total
                  - target_objects
              args: # VARIABLE
                - name
                - "{self[value]}"
      scalable:
        error: true
        reason: Not described in TOSCA Profile YAML v1.0
    requirements.local_storage:
      error: true
      reason: Bad description in TOSCA Profile YAML v1.0
